import java.util.Scanner;

class Node {
    int data;
    Node link;

    Node(int data) {
        this.data = data;
        this.link = null;
    }
}

class Main {
    private Node head;

    // Add at the beginning
    public void addFirst(int data) {
        Node newNode = new Node(data);
        newNode.link = head;
        head = newNode;
    }

    // Add at the end
    public void addLast(int data) {
        Node newNode = new Node(data);
        if (head == null) {
            head = newNode;
            return;
        }
        Node current = head;
        while (current.link != null) {
            current = current.link;
        }
        current.link = newNode;
    }

    // Add at a specific position
    public void addBetween(int data, int position) {
        if (position <= 1) {
            addFirst(data);
            return;
        }
        Node newNode = new Node(data);
        Node current = head;
        for (int i = 1; i < position - 1 && current != null; i++) {
            current = current.link;
        }
        if (current == null) {
            System.out.println("Position out of bounds.");
            return;
        }
        newNode.link = current.link;
        current.link = newNode;
    }

    // Delete the first node
    public void deleteFirst() {
        if (head == null) {
            System.out.println("List is empty.");
            return;
        }
        head = head.link;
    }

    // Delete the last node
    public void deleteLast() {
        if (head == null) {
            System.out.println("List is empty.");
            return;
        }
        if (head.link == null) {
            head = null;
            return;
        }
        Node current = head;
        while (current.link.link != null) {
            current = current.link;
        }
        current.link = null;
    }

    // Delete at a specific position
    public void deleteBetween(int position) {
        if (position <= 1) {
            deleteFirst();
            return;
        }
        Node current = head;
        for (int i = 1; i < position - 1 && current != null; i++) {
            current = current.link;
        }
        if (current == null || current.link == null) {
            System.out.println("Position out of bounds.");
            return;
        }
        current.link = current.link.link;
    }

    // Display the list
    public void display() {
        if (head == null) {
            System.out.println("List is empty.");
            return;
        }
        Node current = head;
        while (current != null) {
            System.out.print(current.data + " -> ");
            current = current.link;
        }
        System.out.println("null");
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        Main list = new Main();

        while (true) {
            System.out.println("\n1. Add First\n2. Add Last\n3. Add Between\n4. Delete First\n5. Delete Last\n6. Delete Between\n7. Display\n8. Exit");
            System.out.print("Enter your choice: ");
            int choice = scanner.nextInt();

            switch (choice) {
                case 1:
                    System.out.print("Enter value: ");
                    list.addFirst(scanner.nextInt());
                    break;
                case 2:
                    System.out.print("Enter value: ");
                    list.addLast(scanner.nextInt());
                    break;
                case 3:
                    System.out.print("Enter value: ");
                    int value = scanner.nextInt();
                    System.out.print("Enter position: ");
                    list.addBetween(value, scanner.nextInt());
                    break;
                case 4:
                    list.deleteFirst();
                    break;
                case 5:
                    list.deleteLast();
                    break;
                case 6:
                    System.out.print("Enter position: ");
                    list.deleteBetween(scanner.nextInt());
                    break;
                case 7:
                    list.display();
                    break;
                case 8:
                    System.out.println("Exiting...");
                    scanner.close();
                    return;
                default:
                    System.out.println("Invalid choice!");
            }
        }
    }
}
